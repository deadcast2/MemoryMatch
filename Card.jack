class Card {
	field int type, row, col;
	field boolean flipped;

    constructor Card new(int Atype, int Arow, int Acol) {
		let type = Atype;
		let row = Arow;
		let col = Acol;
		let flipped = false;

		do draw();

        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);

        return;
    }

	method void draw() {
		do drawBorder();
		do drawSymbol();

		return;
	}

	method void select() {
		do Screen.setColor(true);
		do drawSelection();

		return;
	}

	method void unselect() {
		do Screen.setColor(false);
		do drawSelection();

		return;
	}

	method void flip() {
		let flipped = ~flipped;
		
		do drawSymbol();
		
		return;
	}

	method void drawSelection() {
		var int x, y;
		var int width, height;

		let width = 48;
		let height = 64;
		let x = (width * col) + 16;
		let y = (height * row) + 14;

		// Top line
		do Screen.drawLine(x, y, width + x, y);
		do Screen.drawLine(x, y + 1, width + x, y + 1);

		// Bottom line
		do Screen.drawLine(x, height + y, width + x, height + y);
		do Screen.drawLine(x, height + y - 1, width + x, height + y - 1);

		// Left line
		do Screen.drawLine(x, y, x, height + y);
		do Screen.drawLine(x + 1, y, x + 1, height + y);

		// Right line
		do Screen.drawLine(width + x, y, width + x, height + y);
		do Screen.drawLine(width + x - 1, y, width + x - 1, height + y);

		return;
	}

	method void drawBorder() {
		var int x, y, margin;
		var int width, height;

		let width = 48;
		let height = 64;
		let margin = 8;
		let x = (width * col) + 12;
		let y = (height * row) + 10;

		// Top line
		do Screen.drawLine(x + margin, y + margin, width + x, y + margin);

		// Bottom line
		do Screen.drawLine(x + margin, height + y, width + x, height + y);

		// Left line
		do Screen.drawLine(x + margin, y + margin, x + margin, height + y);

		// Right line
		do Screen.drawLine(width + x, y + margin, width + x, height + y);

		return;
	}

	method void drawSymbol() {
		var int x, y;
		var int verticalOffset;

		let verticalOffset = getSymbolVerticalOffset();
		let x = col + (2 * (col + 1));
		let y = (row + (3 * (row + 1))) * verticalOffset;

		do clearSymbol(x + y);

		if (~(flipped)) {
			do drawSymbol0(x + y);
			return;
		}

		if (type = 0) {
			do drawSymbol1(x + y);
		}

		if (type = 1) {
			do drawSymbol2(x + y);
		}

		if (type = 2) {
			do drawSymbol3(x + y);
		}

		return;
	}

	method int getSymbolVerticalOffset() {
		if (row = 0) {
			return 416;
		}

		return 480;
	}

	method void clearSymbol(int location) {
		var int memAddress;
		let memAddress = 16384+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 0);
		do Memory.poke(memAddress+64, 0);
		do Memory.poke(memAddress+96, 0);
		do Memory.poke(memAddress+128, 0);
		do Memory.poke(memAddress+160, 0);
		do Memory.poke(memAddress+192, 0);
		do Memory.poke(memAddress+224, 0);
		do Memory.poke(memAddress+256, 0);
		do Memory.poke(memAddress+288, 0);
		do Memory.poke(memAddress+320, 0);
		do Memory.poke(memAddress+352, 0);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 0);
		do Memory.poke(memAddress+448, 0);
		do Memory.poke(memAddress+480, 0);

		return;
	}

	method void drawSymbol0(int location) {
		var int memAddress;
		let memAddress = 16384+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 4032);
		do Memory.poke(memAddress+64, 6240);
		do Memory.poke(memAddress+96, 4144);
		do Memory.poke(memAddress+128, 12304);
		do Memory.poke(memAddress+160, 12304);
		do Memory.poke(memAddress+192, 4144);
		do Memory.poke(memAddress+224, 6240);
		do Memory.poke(memAddress+256, 3584);
		do Memory.poke(memAddress+288, 768);
		do Memory.poke(memAddress+320, 384);
		do Memory.poke(memAddress+352, 384);
		do Memory.poke(memAddress+384, 0);
		do Memory.poke(memAddress+416, 384);
		do Memory.poke(memAddress+448, 384);
		do Memory.poke(memAddress+480, 0);

		return;
	}

	method void drawSymbol1(int location) {
		var int memAddress;
		let memAddress = 16384+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 384);
		do Memory.poke(memAddress+64, 384);
		do Memory.poke(memAddress+96, 384);
		do Memory.poke(memAddress+128, 384);
		do Memory.poke(memAddress+160, 384);
		do Memory.poke(memAddress+192, 384);
		do Memory.poke(memAddress+224, 32382);
		do Memory.poke(memAddress+256, 32382);
		do Memory.poke(memAddress+288, 384);
		do Memory.poke(memAddress+320, 384);
		do Memory.poke(memAddress+352, 384);
		do Memory.poke(memAddress+384, 384);
		do Memory.poke(memAddress+416, 384);
		do Memory.poke(memAddress+448, 384);
		do Memory.poke(memAddress+480, 0);

		return;
	}

	method void drawSymbol2(int location) {
		var int memAddress;
		let memAddress = 16384+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 960);
		do Memory.poke(memAddress+64, 1056);
		do Memory.poke(memAddress+96, 2064);
		do Memory.poke(memAddress+128, 4104);
		do Memory.poke(memAddress+160, 8196);
		do Memory.poke(memAddress+192, 16386);
		do Memory.poke(memAddress+224, 16770);
		do Memory.poke(memAddress+256, 16770);
		do Memory.poke(memAddress+288, 16386);
		do Memory.poke(memAddress+320, 8196);
		do Memory.poke(memAddress+352, 4104);
		do Memory.poke(memAddress+384, 2064);
		do Memory.poke(memAddress+416, 1056);
		do Memory.poke(memAddress+448, 960);
		do Memory.poke(memAddress+480, 0);

		return;
	}

	method void drawSymbol3(int location) {
		var int memAddress;
		let memAddress = 16384+location;

		do Memory.poke(memAddress+0, 0);
		do Memory.poke(memAddress+32, 32766);
		do Memory.poke(memAddress+64, 16386);
		do Memory.poke(memAddress+96, 16386);
		do Memory.poke(memAddress+128, 16386);
		do Memory.poke(memAddress+160, 16386);
		do Memory.poke(memAddress+192, 16386);
		do Memory.poke(memAddress+224, 16770);
		do Memory.poke(memAddress+256, 16770);
		do Memory.poke(memAddress+288, 16386);
		do Memory.poke(memAddress+320, 16386);
		do Memory.poke(memAddress+352, 16386);
		do Memory.poke(memAddress+384, 16386);
		do Memory.poke(memAddress+416, 16386);
		do Memory.poke(memAddress+448, 32766);
		do Memory.poke(memAddress+480, 0);

		return;
	}
}
